name: CI/CD Pipeline

on:
    push:
        branches: [ master ]
    pull_request:
        branches: [ master ]
    release:
        types: [published]

jobs:
    test:
        runs-on: ubuntu-latest

        steps:
            - uses: actions/checkout@v4

            - name: Set up Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: '16'

            - name: Set up JDK 8
              uses: actions/setup-java@v4
              with:
                  java-version: '8'
                  distribution: 'temurin'

            - name: Cache Maven dependencies
              uses: actions/cache@v3
              with:
                  path: ~/.m2
                  key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
                  restore-keys: ${{ runner.os }}-m2

            - name: Run tests
              run: mvn verify -DskipITs=true

            -   name: Generate test report
                run: mvn test jacoco:report

    deploy:
        needs: test
        runs-on: ubuntu-latest
        if: github.event_name == 'release' && github.event.action == 'published'

        steps:
            - uses: actions/checkout@v4

            - name: Set up Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: '16'

            - name: Set up JDK 8
              uses: actions/setup-java@v4
              with:
                  java-version: '8'
                  distribution: 'temurin'

            - name: Cache Maven dependencies
              uses: actions/cache@v3
              with:
                  path: ~/.m2
                  key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
                  restore-keys: ${{ runner.os }}-m2

            - name: Build and package
              run: |
                  mvn clean package
                  mvn assembly:single

            - name: Upload release asset
              uses: actions/upload-release-asset@v1
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  upload_url: ${{ github.event.release.upload_url }}
                  asset_path: ./target/dataloader.zip
                  asset_name: dataloader.zip
                  asset_content_type: application/zip
